1) for attribute in label is used along with id in input -> so that when I click on label, my cursor must go to the input field
2) name attibute specifies the name to be sent to a server when a form is submitted 
3) value attribute specifies the value to be sent to a server when a form is submitted, in input tag - it specifies the initial value in the text field
4) type specifies the type of the value
5) placeholder specifies the invisible part behind the input text field

6) anchor tag is for link 
7) img srcset sizes
8) The <span> tag is an inline container used to mark up a part of a text, or a part of a document.
   The <span> tag is much like the <div> element, but <div> is a block-level element and <span> is an inline element.


1) inline, internal, external css
2) selector - id, class, element, universal, grouping, nested
// #class1, #class2 {properites:value} -> grouping selector
// #first>p {} -> nested selection(elements of elements) -> first class ke andhr paragraph ko properites assign krdo
3) font-size, font-weight, font-style, font-family, border, border-radius(border-radius: 50% = circle), text-align, color, text-decoration
// do not use px in font-size (font-size remain same for visually impaired people, absolute), instead use em. but there is a problem with em is that it 
// is relative to parent. It's value will get increased on the bass of parent. To handle those cases, you can make use of rem (root em)
px is absolute

4) box-sizing: border-box; [width and height content ke hisab se hogi, agr hum chahte hai ki border include krke border ke hisab se ho tou hum box-sizing: border-box use krenge]
5) css units -
    % -> relative to parent
    vw -> absolute unit to window screen
    em -> we must always use em in font-size and not px. em is relative to parent. By default, it's value is 1em

6) block elements - para, heading, division, forms, list
   inline elements - span, anchor 
   inline-block - images
   // dono block ko inline krna pdega to make them inline.. 

7) navigation - list-style: none;   
8) position: static, relative, absolute, fixed (absolute and fixed works relative to the root)
9) overflow: visible, hidden, scroll, auto
10) float: left, right, none, inherit
// src="https://via.placeholder.com/200"
11) clear:left, right, both (content & img)

12) to get the inner box in the center of the outer box -
inside inner-box, we use {
    position: relative; top:50%; transform: translate(-50%);
}

13) We use margin to generate a gap between elements and parent, but if just want to maintain gap between elements and not with parent, we use gap:10px, row-gap:10px, column-gap;

13) background-color or background: linear-gradient(to right, color1, color2);
14)
FLEX CONTAINER ----
flex-box => display: flex;
//  flex-direction, flex-wrap, flex-flow, justify-content, align-items, align-content
i)  flex-direction by default main axis(x, justify-content) ke according hoti hai, if want for cross axis(y, align-items) we use flex-direction:column
    flex-direction: row(defult), column, row-reverse, column-reverse;
ii) flex-wrap: to avoid shrinking of box (flex-wrap:wrap; reverse-wrap)  
iii)flex-flow: flex-direction flex-wrap;
iv) justify-content (main (x) axis ke around): space-around (to cover space), space-between (inner elements only), flex-start, flex-end, flex-center
v) align-items(cross (y) axis ke around): stretch(by default), flex-start, flex-end;
// div ko center mei lana ho dusre div mei display:flex, justify-content:center; align-items:center;
vi) align-content: (rows ke beech mei gap maintain kr skte)

FLEX CHILD ITEMS ---
order, flex-grow, flex-shrink, flex-basis, align-self
i) order - konsa box pehle ayega 
ii, iii) konsa elements/box pehle shrink ya grow hona chaiye
iv) initial width for a particular element in the direction of main axis
v) flex: grow, shrink, basis

15) grid layout - 
CONTANINER-
display: grid;
// gap, row-gap, column-gap, grid-template-columns(fraction fr, or any other units)
gap, grid-template-columns, grid-template-rows,justify-content, align-content, align-items
GRID CHILD ITEMS - 
justify-self, align-self, grid-column-start, gird-column-end, grid-column, grid-row, grid-area(imp), grid-template-areas

16) media-queries - 
@media (min-width: 400px) and (max-width: 600px) {} or (width <= 400px) {} or (orientation: portrait) {}

17) dark-mode 
/*
:root { // global variables
    --primary-color: #ddd;
}
.dark { // overriding the root html variables when using this class (.dark) in any container
    --primary-color: #555;
}
*/

18) pseudo-class: used to define a special state of an element
   eg-> :visited, :link, :hover, :active, :first-child, :last-child, nth-child(for eg- from list, it uses formula = {an + b});
19) pseudo elements - used to style specified parts of an element.
    eg-> ::first-letter, ::first-line, ::selection, ::before, ::after
    name::after {
        content: '*' or 'This is the required field' (this content can't be selected as it is not a part of html)
    }

20) transform: scale(X, Y), ScaleX, ScaleY, skew(20deg, Y-direction-mei-deg), translate, rotate, transform-origin
    center point ke hisab se movement krna - 
    // translate(X-direction mei center ke hisab se kitna left-right move krna, (Y-direction) 50%);
    // rotate(20deg, 40deg); // z direction mei bhi kr skte

21) transition: 1s (container/box ke andhr likhna hota jispe ye effect add krna chahte);
    // transition-delay, transition-duration, transition-property, transition-timing-function
    // transition-timing-function: ease(slow-fast-slow movement), ease-in(slow start), ease-out(slow-end), ease-in-out(slown start and end),
    // linear(same speed from start to end), cubic-bezier(define own value from inspect curve function)
    // kisi action hone (eg hover krne) pr yeh effect hoga -

22) Animation (Using keyframes) -
.container {
    animation-name: name (written in keyframes below)
    animation-duration: in s
    animation-delay:in s
    animation-iteration-count:(can be infinite)
    animation-direction: normal,reverse, alternate, alternate-reverse;
    animation-timing-function: same as transition-timing-function
    animation-fill-mode: (specifies a style for the target element when the animation is not playing)
    // none, forwards, backwards, both

}
@keyframes name {
    0%, 100% {
        properties;
    }
    25% {
        properties:values;
    }
    50% {
        properties:values;
    }
    75% {
        properties:values;
    }
}

// addEventListener(event, function, useCaptue);
by default, it's bubbling(false), i.e. the innermost element's event is handled first and then the outer
while in capturing, it's bubbling(false), the outermost element's event is handled first and then the inner